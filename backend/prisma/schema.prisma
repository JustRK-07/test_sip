// Prisma Schema for Campaign-Based Calling System
// Database: SQLite (for testing) / PostgreSQL (for production)

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Campaign Model
model Campaign {
  id              String    @id @default(cuid())
  name            String
  description     String?
  status          String    @default("draft")
  // Status values: draft, scheduled, active, paused, completed, stopped, failed

  // Multi-tenancy support
  tenantId        String?   @map("tenant_id")

  maxConcurrent   Int       @default(3) @map("max_concurrent")
  retryFailed     Boolean   @default(true) @map("retry_failed")
  retryAttempts   Int       @default(1) @map("retry_attempts")
  callDelay       Int       @default(2000) @map("call_delay") // milliseconds

  // LiveKit/SIP Configuration
  agentName       String?   @map("agent_name") // AI agent name (e.g., "telephony-agent")
  sipTrunkId      String?   @map("sip_trunk_id") // SIP trunk ID for routing calls
  callerIdNumber  String?   @map("caller_id_number") // Optional caller ID to display

  scheduledAt     DateTime? @map("scheduled_at")
  startedAt       DateTime? @map("started_at")
  completedAt     DateTime? @map("completed_at")

  // Statistics
  totalCalls      Int       @default(0) @map("total_calls")
  successfulCalls Int       @default(0) @map("successful_calls")
  failedCalls     Int       @default(0) @map("failed_calls")

  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  // Relations
  tenant          Tenant?   @relation(fields: [tenantId], references: [id], onDelete: SetNull)
  leads           Lead[]
  callLogs        CallLog[]
  campaignAgents  CampaignAgent[]
  phoneNumbers    PhoneNumber[]

  @@index([tenantId])
  @@index([status])
  @@index([scheduledAt])
  @@map("campaigns")
}

// Agent Model
model Agent {
  id                 String   @id @default(cuid())
  name               String
  livekitAgentName   String?  @map("livekit_agent_name") // LiveKit worker name (e.g., "telephony-agent")
  description        String?
  voiceId            String?  @map("voice_id")
  personality        String?
  systemPrompt       String?  @map("system_prompt")
  isActive           Boolean  @default(true) @map("is_active")
  maxConcurrentCalls Int      @default(3) @map("max_concurrent_calls") // Max concurrent calls per agent

  metadata           String?  // JSON as string for SQLite

  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")

  // Relations
  campaignAgents     CampaignAgent[]
  callLogs           CallLog[]

  @@index([isActive])
  @@index([livekitAgentName])
  @@map("agents")
}

// Campaign-Agent Many-to-Many Relationship
model CampaignAgent {
  id          String   @id @default(cuid())
  campaignId  String   @map("campaign_id")
  agentId     String   @map("agent_id")
  isPrimary   Boolean  @default(false) @map("is_primary")

  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  campaign    Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  agent       Agent    @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@unique([campaignId, agentId])
  @@index([campaignId])
  @@index([agentId])
  @@map("campaign_agents")
}

// Lead Model
model Lead {
  id           String    @id @default(cuid())
  campaignId   String?   @map("campaign_id") // Made optional to allow unassigned leads
  phoneNumber  String    @map("phone_number")
  name         String?
  email        String?
  status       String    @default("pending")
  // Status values: pending, calling, answered, completed, no-answer, busy, failed

  // Multi-tenancy support
  tenantId     String?   @map("tenant_id")

  priority     Int       @default(1)
  attempts     Int       @default(0)
  metadata     String?   // JSON as string for SQLite

  lastCallAt   DateTime? @map("last_call_at")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  // Relations
  tenant       Tenant?   @relation(fields: [tenantId], references: [id], onDelete: SetNull)
  campaign     Campaign? @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  callLogs     CallLog[]

  @@index([tenantId])
  @@index([campaignId, status])
  @@index([phoneNumber])
  @@index([status])
  @@map("leads")
}

// Call Log Model
model CallLog {
  id           String    @id @default(cuid())
  leadId       String    @map("lead_id")
  agentId      String?   @map("agent_id")
  campaignId   String    @map("campaign_id")

  phoneNumber  String    @map("phone_number")
  callSid      String?   @map("call_sid")
  roomName     String?   @map("room_name")
  dispatchId   String?   @map("dispatch_id")
  status       String
  // Status values: initiated, ringing, answered, in-progress, completed, no-answer, busy, failed, canceled

  duration     Int?      @default(0) // in milliseconds
  recordingUrl String?   @map("recording_url")
  error        String?   // Error message
  metadata     String?   // JSON as string for SQLite

  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  // Relations
  lead         Lead      @relation(fields: [leadId], references: [id], onDelete: Cascade)
  agent        Agent?    @relation(fields: [agentId], references: [id])
  campaign     Campaign  @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@index([leadId])
  @@index([campaignId])
  @@index([status])
  @@index([callSid])
  @@map("call_logs")
}

// ============================================================================
// NEW MODELS - Tenant and Trunk Management
// These are ADDITIVE ONLY - existing models above are unchanged
// ============================================================================

// Tenant Model (Multi-tenancy support - OPTIONAL)
model Tenant {
  id          String   @id @default(cuid())
  name        String
  domain      String?  @unique
  isActive    Boolean  @default(true) @map("is_active")

  metadata    String?  // JSON as string for SQLite

  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  campaigns         Campaign[]
  leads             Lead[]
  platformTrunks    PlatformTrunk[]
  livekitTrunks     LiveKitTrunk[]
  phoneNumbers      PhoneNumber[]
  users             User[]

  @@index([isActive])
  @@map("tenants")
}

// Platform Trunk Model (Twilio Elastic SIP Trunk)
model PlatformTrunk {
  id              String   @id @default(cuid())
  name            String
  description     String?

  // Twilio Configuration
  twilioTrunkSid  String?  @unique @map("twilio_trunk_sid")
  twilioRegion    String   @default("us1") @map("twilio_region")

  // Optional tenant association (null = shared/system-level trunk)
  tenantId        String?  @map("tenant_id")

  maxChannels     Int      @default(100) @map("max_channels")
  isActive        Boolean  @default(true) @map("is_active")

  metadata        String?  // JSON as string for SQLite

  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relations
  tenant          Tenant?       @relation(fields: [tenantId], references: [id], onDelete: SetNull)
  livekitTrunks   LiveKitTrunk[]

  @@index([tenantId])
  @@index([isActive])
  @@map("platform_trunks")
}

// LiveKit Trunk Model (LiveKit SIP Trunk)
model LiveKitTrunk {
  id                  String   @id @default(cuid())
  name                String
  description         String?

  // LiveKit Configuration
  livekitTrunkId      String?  @unique @map("livekit_trunk_id") // LiveKit's SIP trunk ID
  livekitRegion       String   @default("us-east-1") @map("livekit_region")
  trunkType           String   @default("OUTBOUND") @map("trunk_type")
  // Trunk types: INBOUND, OUTBOUND

  status              String   @default("PROVISIONING")
  // Status: ACTIVE, INACTIVE, PROVISIONING, ERROR, MAINTENANCE

  // Relationships
  tenantId            String?  @map("tenant_id")
  platformTrunkId     String   @map("platform_trunk_id")

  // Configuration
  maxConcurrentCalls  Int      @default(10) @map("max_concurrent_calls")
  codecPreferences    String?  @map("codec_preferences") // JSON array as string
  isActive            Boolean  @default(true) @map("is_active")

  metadata            String?  // JSON as string for SQLite

  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")

  // Relations
  tenant              Tenant?       @relation(fields: [tenantId], references: [id], onDelete: SetNull)
  platformTrunk       PlatformTrunk @relation(fields: [platformTrunkId], references: [id], onDelete: Cascade)
  phoneNumbers        PhoneNumber[]

  @@index([tenantId])
  @@index([platformTrunkId])
  @@index([status])
  @@index([trunkType])
  @@index([isActive])
  @@map("livekit_trunks")
}

// Phone Number Model (Purchased/Assigned phone numbers)
model PhoneNumber {
  id              String    @id @default(cuid())
  number          String    @unique // E.164 format: +1234567890
  friendlyName    String?   @map("friendly_name")

  // Phone number type
  type            String    @default("LOCAL")
  // Types: LOCAL, TOLL_FREE, MOBILE

  // Provider information
  provider        String    @default("TWILIO")
  providerSid     String?   @map("provider_sid") // Twilio phone number SID

  // Relationships (all optional for flexibility)
  tenantId        String?   @map("tenant_id")
  livekitTrunkId  String?   @map("livekit_trunk_id")
  campaignId      String?   @map("campaign_id")

  // Status and metadata
  isActive        Boolean   @default(true) @map("is_active")
  metadata        String?   // JSON as string for SQLite

  // Lifecycle dates
  purchasedAt     DateTime? @map("purchased_at")
  releasedAt      DateTime? @map("released_at")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  // Relations
  tenant          Tenant?      @relation(fields: [tenantId], references: [id], onDelete: SetNull)
  livekitTrunk    LiveKitTrunk? @relation(fields: [livekitTrunkId], references: [id], onDelete: SetNull)
  campaign        Campaign?    @relation(fields: [campaignId], references: [id], onDelete: SetNull)

  @@index([tenantId])
  @@index([livekitTrunkId])
  @@index([campaignId])
  @@index([isActive])
  @@index([provider])
  @@map("phone_numbers")
}

// ============================================================================
// AUTHENTICATION - User Model
// ============================================================================

// User Model (Authentication and Authorization)
model User {
  id           String   @id @default(cuid())
  email        String   @unique
  passwordHash String   @map("password_hash")
  name         String?

  // User type
  isAdmin      Boolean  @default(false) @map("is_admin")
  // isAdmin = true → System admin (acct: "00000000-0000-0000-0000-00000000b40d")
  // isAdmin = false → Regular user (acct: their tenantId)

  // Regular user tenant association
  tenantId     String?  @map("tenant_id")

  // Account status
  isActive     Boolean  @default(true) @map("is_active")

  // Metadata
  lastLoginAt  DateTime? @map("last_login_at")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  // Relations
  tenant       Tenant?  @relation(fields: [tenantId], references: [id], onDelete: SetNull)

  @@index([email])
  @@index([isAdmin])
  @@index([tenantId])
  @@index([isActive])
  @@map("users")
}
