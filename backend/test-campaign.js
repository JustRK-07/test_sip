#!/usr/bin/env node
/**
 * Campaign Prototype Test Script
 * Tests the campaign calling logic with real calls
 */

require('dotenv').config();
const fs = require('fs');
const path = require('path');
const CampaignQueue = require('./src/services/CampaignQueue');
const logger = require('./src/utils/logger');

// ASCII Art Banner
console.log('\n' + '‚ïê'.repeat(70));
console.log(`
  ‚ïî‚ïê‚ïó‚îå‚îÄ‚îê‚îå‚î¨‚îê‚îå‚îÄ‚îê‚îå‚îÄ‚îê‚î¨‚îå‚îÄ‚îê‚îå‚îê‚îå  ‚ïî‚ïê‚ïó‚îå‚îÄ‚îê‚î¨  ‚î¨  ‚î¨‚îå‚îê‚îå‚îå‚îÄ‚îê  ‚ïî‚ïê‚ïó‚î¨‚îÄ‚îê‚îå‚îÄ‚îê‚îå‚î¨‚îê‚îå‚îÄ‚îê‚îå‚î¨‚îê‚î¨ ‚î¨‚îå‚îÄ‚îê‚îå‚îÄ‚îê
  ‚ïë  ‚îú‚îÄ‚î§‚îÇ‚îÇ‚îÇ‚îú‚îÄ‚îò‚îú‚îÄ‚î§‚îÇ‚îÇ ‚î¨‚îÇ‚îÇ‚îÇ  ‚ïë  ‚îú‚îÄ‚î§‚îÇ  ‚îÇ  ‚îÇ‚îÇ‚îÇ‚îÇ‚îÇ ‚î¨  ‚ï†‚ïê‚ïù‚îú‚î¨‚îò‚îÇ ‚îÇ ‚îÇ ‚îÇ ‚îÇ ‚îÇ ‚îî‚î¨‚îò‚îú‚îÄ‚îò‚îú‚î§
  ‚ïö‚ïê‚ïù‚î¥ ‚î¥‚î¥ ‚î¥‚î¥  ‚î¥ ‚î¥‚î¥‚îî‚îÄ‚îò‚îò‚îî‚îò  ‚ïö‚ïê‚ïù‚î¥ ‚î¥‚î¥‚îÄ‚îò‚î¥‚îÄ‚îò‚î¥‚îò‚îî‚îò‚îî‚îÄ‚îò  ‚ï©  ‚î¥‚îî‚îÄ‚îî‚îÄ‚îò ‚î¥ ‚îî‚îÄ‚îò ‚î¥  ‚î¥ ‚î¥  ‚îî‚îÄ‚îò
`);
console.log('‚ïê'.repeat(70));
console.log('\nüí° Testing Campaign Queue with Node.js + Python Integration\n');

async function main() {
  try {
    // ========================================
    // 1. LOAD LEADS FROM JSON FILE
    // ========================================
    const leadsFilePath = path.join(__dirname, 'test-leads.json');

    logger.info('üìÇ Loading leads from file...', { file: leadsFilePath });

    if (!fs.existsSync(leadsFilePath)) {
      logger.error('‚ùå Leads file not found!', { file: leadsFilePath });
      logger.info('üí° Create a test-leads.json file with sample phone numbers');
      process.exit(1);
    }

    const leadsData = JSON.parse(fs.readFileSync(leadsFilePath, 'utf8'));

    if (!Array.isArray(leadsData) || leadsData.length === 0) {
      logger.error('‚ùå No leads found in file!');
      process.exit(1);
    }

    logger.info(`‚úÖ Loaded ${leadsData.length} leads from file`);

    // ========================================
    // 2. CREATE CAMPAIGN QUEUE
    // ========================================
    const campaign = new CampaignQueue({
      campaignName: 'Real Test Campaign - 3 Concurrent Calls',
      maxConcurrent: 3, // Max 3 concurrent calls (all at once!)
      retryFailed: false, // Don't retry in prototype
      retryAttempts: 1,
      callDelay: 2000, // 2 seconds between initiating calls
    });

    // ========================================
    // 3. SETUP EVENT LISTENERS
    // ========================================
    campaign.on('campaign_started', (data) => {
      console.log('\n' + '‚îÅ'.repeat(70));
      console.log(`üöÄ Campaign Started: ${data.campaignName}`);
      console.log(`üìä Total Leads: ${data.totalLeads}`);
      console.log('‚îÅ'.repeat(70) + '\n');
    });

    campaign.on('call_started', ({ lead }) => {
      console.log(
        `\nüìû [CALLING] ${lead.name} - ${lead.phoneNumber} (Attempt ${lead.attempts})`
      );
    });

    campaign.on('call_completed', ({ lead, result }) => {
      console.log(`‚úÖ [SUCCESS] ${lead.name} - ${lead.phoneNumber}`);
      console.log(`   ‚îú‚îÄ Room: ${result.roomName}`);
      console.log(`   ‚îú‚îÄ Dispatch: ${result.dispatchId}`);
      console.log(`   ‚îî‚îÄ Duration: ${result.duration}ms`);
    });

    campaign.on('call_failed', ({ lead, error }) => {
      console.log(`‚ùå [FAILED] ${lead.name} - ${lead.phoneNumber}`);
      console.log(`   ‚îî‚îÄ Error: ${error.error || error.message}`);
    });

    campaign.on('campaign_completed', ({ campaignName, stats, duration }) => {
      console.log('\n' + '‚ïê'.repeat(70));
      console.log(`üéâ Campaign Completed: ${campaignName}`);
      console.log('‚ïê'.repeat(70));
      console.log(`üìä FINAL RESULTS:`);
      console.log(`   ‚îú‚îÄ Total Leads:     ${stats.total}`);
      console.log(`   ‚îú‚îÄ ‚úÖ Completed:    ${stats.completed} (${Math.round((stats.completed / stats.total) * 100)}%)`);
      console.log(`   ‚îú‚îÄ ‚ùå Failed:       ${stats.failed} (${Math.round((stats.failed / stats.total) * 100)}%)`);
      console.log(`   ‚îî‚îÄ ‚è±Ô∏è  Duration:     ${duration.formatted}`);
      console.log('‚ïê'.repeat(70) + '\n');
    });

    // ========================================
    // 4. ADD LEADS TO CAMPAIGN
    // ========================================
    campaign.addLeads(leadsData);

    // ========================================
    // 5. SHOW PREVIEW
    // ========================================
    console.log('\n' + '‚îÄ'.repeat(70));
    console.log('üìã CAMPAIGN PREVIEW:');
    console.log('‚îÄ'.repeat(70));
    console.log(`Campaign Name:    ${campaign.campaignName}`);
    console.log(`Max Concurrent:   ${campaign.maxConcurrent} calls`);
    console.log(`Total Leads:      ${campaign.stats.total}`);
    console.log(`Call Delay:       ${campaign.callDelay}ms`);
    console.log('‚îÄ'.repeat(70));
    console.log('\nüìû Leads to call:');
    leadsData.forEach((lead, index) => {
      console.log(`   ${index + 1}. ${lead.name} - ${lead.phoneNumber}`);
    });
    console.log('‚îÄ'.repeat(70) + '\n');

    // ========================================
    // 6. ASK FOR CONFIRMATION
    // ========================================
    console.log('‚ö†Ô∏è  WARNING: This will make REAL phone calls!');
    console.log('üí° Make sure voice_agent.py is running in another terminal\n');

    // Auto-start in 5 seconds (or comment this out and uncomment readline below)
    console.log('‚è≥ Starting campaign in 5 seconds... (Press Ctrl+C to cancel)\n');
    await new Promise((resolve) => setTimeout(resolve, 5000));

    // OR: Uncomment this for manual confirmation
    /*
    const readline = require('readline').createInterface({
      input: process.stdin,
      output: process.stdout,
    });

    const answer = await new Promise((resolve) => {
      readline.question('üëâ Start campaign? (yes/no): ', resolve);
    });
    readline.close();

    if (answer.toLowerCase() !== 'yes' && answer.toLowerCase() !== 'y') {
      console.log('\n‚ùå Campaign cancelled\n');
      process.exit(0);
    }
    */

    // ========================================
    // 7. START CAMPAIGN
    // ========================================
    await campaign.start();

    // ========================================
    // 8. SHOW DETAILED RESULTS
    // ========================================
    console.log('\n' + '‚ïê'.repeat(70));
    console.log('üìä DETAILED RESULTS:');
    console.log('‚ïê'.repeat(70) + '\n');

    if (campaign.completedLeads.length > 0) {
      console.log('‚úÖ SUCCESSFUL CALLS:');
      campaign.completedLeads.forEach((lead, index) => {
        console.log(`   ${index + 1}. ${lead.name} (${lead.phoneNumber})`);
        console.log(`      Room: ${lead.result.roomName}`);
        console.log(`      Duration: ${lead.result.duration}ms`);
        console.log('');
      });
    }

    if (campaign.failedLeads.length > 0) {
      console.log('‚ùå FAILED CALLS:');
      campaign.failedLeads.forEach((lead, index) => {
        console.log(`   ${index + 1}. ${lead.name} (${lead.phoneNumber})`);
        console.log(`      Error: ${lead.error.error || lead.error.message}`);
        console.log('');
      });
    }

    console.log('‚ïê'.repeat(70));
    console.log('üéâ Test Complete!\n');

    process.exit(0);
  } catch (error) {
    logger.error('‚ùå Campaign failed:', error);
    console.error('\n‚ùå Error:', error.message);
    process.exit(1);
  }
}

// Handle Ctrl+C
process.on('SIGINT', () => {
  console.log('\n\n‚èπÔ∏è  Campaign interrupted by user\n');
  process.exit(0);
});

// Run main function
main();
